name: Android CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]    

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        token: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Set up Android NDK
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r25c
        
    - name: Cache NDK
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.ANDROID_NDK_ROOT }}
        key: ${{ runner.os }}-ndk-r25c
        
    - name: Set NDK environment variables
      run: |
        echo "ANDROID_NDK_HOME=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
        echo "NDK_HOME=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
        
    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-ndk-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', '**/CMakeLists.txt', '**/*.cmake') }}
        restore-keys: |
          ${{ runner.os }}-gradle-ndk-
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Run unit tests
      run: ./gradlew testDebugUnitTest
      
    - name: Generate test report
      uses: dorny/test-reporter@v2
      if: success() || failure()
      with:
        name: Unit Test Results
        path: '**/build/test-results/testDebugUnitTest/TEST-*.xml'
        reporter: java-junit

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        token: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Set up Android NDK
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r25c
        
    - name: Cache NDK
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.ANDROID_NDK_ROOT }}
        key: ${{ runner.os }}-ndk-r25c
        
    - name: Set NDK environment variables
      run: |
        echo "ANDROID_NDK_HOME=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
        echo "NDK_HOME=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
        
    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-ndk-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', '**/CMakeLists.txt', '**/*.cmake') }}
        restore-keys: |
          ${{ runner.os }}-gradle-ndk-
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build debug APK
      run: ./gradlew assembleDebug
      
    - name: Upload debug APK
      uses: actions/upload-artifact@v4
      with:
        name: debug-apk
        path: app/build/outputs/apk/debug/*.apk
        
    - name: Build release APK (unsigned)
      run: ./gradlew assembleRelease
      
    - name: Upload release APK
      uses: actions/upload-artifact@v4
      with:
        name: release-apk-unsigned
        path: app/build/outputs/apk/release/*.apk

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        token: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Set up Android NDK
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r25c
        
    - name: Set NDK environment variables
      run: |
        echo "ANDROID_NDK_HOME=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
        echo "NDK_HOME=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
        
    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-ndk-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', '**/CMakeLists.txt', '**/*.cmake') }}
        restore-keys: |
          ${{ runner.os }}-gradle-ndk-
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Run lint
      run: ./gradlew lintDebug
      
    - name: Upload lint results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lint-results
        path: app/build/reports/lint-results-debug.html

  # Optional: Build signed release APK (requires secrets)
  release:
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        token: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Set up Android NDK
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r25c
        
    - name: Set NDK environment variables
      run: |
        echo "ANDROID_NDK_HOME=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
        echo "NDK_HOME=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
        
    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-ndk-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', '**/CMakeLists.txt', '**/*.cmake') }}
        restore-keys: |
          ${{ runner.os }}-gradle-ndk-
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Check if signing secrets exist
      id: check_secrets
      run: |
        if [ -n "${{ secrets.KEYSTORE_BASE64 }}" ] && [ -n "${{ secrets.KEYSTORE_PASSWORD }}" ] && [ -n "${{ secrets.KEY_ALIAS }}" ] && [ -n "${{ secrets.KEY_PASSWORD }}" ]; then
          echo "secrets_exist=true" >> $GITHUB_OUTPUT
          echo "Signing secrets were found. Building **signed** APK."
        else
          echo "secrets_exist=false" >> $GITHUB_OUTPUT
          echo "Warning: Signing secrets not found. Building unsigned APK."
        fi
      
    - name: Decode keystore
      if: steps.check_secrets.outputs.secrets_exist == 'true'
      run: |
        echo "current working directory: $(pwd)"
        echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > keystore.jks
        
    - name: Build signed release APK
      if: steps.check_secrets.outputs.secrets_exist == 'true'
      env:
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: |
        echo "current working directory: $(pwd)"
        ls -la
        ./gradlew assembleRelease \
          -Pandroid.injected.signing.store.file=keystore.jks \
          -Pandroid.injected.signing.store.password=$KEYSTORE_PASSWORD \
          -Pandroid.injected.signing.key.alias=$KEY_ALIAS \
          -Pandroid.injected.signing.key.password=$KEY_PASSWORD

        # Rename APKs with descriptive names
        cd app/build/outputs/apk/release/
        for apk in *.apk; do
          if [[ $apk == *"universal"* ]]; then
            mv "$apk" "verovio-demo-${{ github.event.release.tag_name }}-universal.apk"
          elif [[ $apk == *"arm64-v8a"* ]]; then
            mv "$apk" "verovio-demo-${{ github.event.release.tag_name }}-arm64.apk"
          elif [[ $apk == *"armeabi-v7a"* ]]; then
            mv "$apk" "verovio-demo-${{ github.event.release.tag_name }}-arm32.apk"
          elif [[ $apk == *"x86_64"* ]]; then
            mv "$apk" "verovio-demo-${{ github.event.release.tag_name }}-x86_64.apk"
          else
            mv "$apk" "verovio-demo-${{ github.event.release.tag_name }}.apk"
          fi
        done          
          
    - name: Build unsigned release APK (fallback)
      if: steps.check_secrets.outputs.secrets_exist == 'false'
      run: ./gradlew assembleRelease
          
    - name: Upload signed release APK
      if: steps.check_secrets.outputs.secrets_exist == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: release-apk-signed
        path: app/build/outputs/apk/release/*.apk

    - name: Upload release APK to GitHub Release
      if: steps.check_secrets.outputs.secrets_exist == 'true'
      uses: softprops/action-gh-release@v2
      with:
        files: app/build/outputs/apk/release/*.apk
        tag_name: ${{ github.event.release.tag_name }}
        body: |
          ## Download
          
          ðŸ“± **For most users**: Download `verovio-demo-${{ github.event.release.tag_name }}-universal.apk`
          
          ðŸ”§ **Architecture-specific** (smaller file size):
          - **ARM64 devices** (most modern phones): `verovio-demo-${{ github.event.release.tag_name }}-arm64.apk`
          - **ARM32 devices** (older phones): `verovio-demo-${{ github.event.release.tag_name }}-arm32.apk`
          - **x86_64 devices** (emulators/tablets): `verovio-demo-${{ github.event.release.tag_name }}-x86_64.apk`
          
          ## Installation
          1. Download the APK file
          2. Enable "Install from Unknown Sources" in Android settings
          3. Tap the downloaded APK to install
          
          ## What's New
          Initial release

    - name: Generate download instructions
      run: |
        cat > DOWNLOAD_INSTRUCTIONS.md << EOF
        # verovio-demo ${{ github.event.release.tag_name }} - Download Instructions
        
        ## Quick Download
        [ðŸ“± Download APK](https://github.com/${{ github.repository }}/releases/download/${{ github.event.release.tag_name }}/verovio-demo-${{ github.event.release.tag_name }}.apk)
        
        ## Installation Steps
        1. **Download** the APK file using the link above
        2. **Enable Unknown Sources**:
          - Go to Settings > Security (or Privacy)
          - Enable "Install apps from unknown sources" or "Unknown sources"
          - Some devices: Settings > Apps > Special access > Install unknown apps
        3. **Install the APK**:
          - Open your file manager or Downloads folder
          - Tap on the downloaded APK file
          - Follow the installation prompts
        
        ## Troubleshooting
        - **"App not installed"**: Enable Unknown Sources and try again
        - **"Package appears to be corrupt"**: Re-download the APK
        - **"App keeps crashing"**: Check if your device architecture is supported
        
        ## Device Requirements
        - Android 7.0 (API level 24) or higher
        - ARM64, ARM32, or x86_64 architecture
        - Minimum 100MB free storage
        
        ## Verify APK Integrity
        **SHA256**: \`$(sha256sum app/build/outputs/apk/release/verovio-demo-${{ github.event.release.tag_name }}.apk | cut -d' ' -f1)\`
        EOF

    - name: Upload unsigned release APK
      if: steps.check_secrets.outputs.secrets_exist == 'false'
      uses: actions/upload-artifact@v4
      with:
        name: release-apk-unsigned
        path: app/build/outputs/apk/release/*.apk
        
    - name: Clean up keystore
      if: always()
      run: rm -f keystore.jks